# database/database.py
import sqlite3
import os

# *** NOVO ***: Adicionamos esta fun√ß√£o para centralizar a conex√£o
def get_db_connection():
    """Retorna uma conex√£o com o banco de dados."""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    db_path = os.path.join(base_dir, 'cupcakes.db')
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row  # üî• Isso √© m√°gico: faz as consultas virem como dicion√°rios!
    return conn
# *** FIM DO NOVO ***

def init_db():
    # O banco ser√° criado na PR√ìPRIA pasta database/
    base_dir = os.path.dirname(os.path.abspath(__file__))
    db_path = os.path.join(base_dir, 'cupcakes.db')  # Agora est√° na mesma pasta
    
    # *** ALTERA√á√ÉO ***: Agora usamos a nova fun√ß√£o get_db_connection() aqui dentro tamb√©m!
    conn = get_db_connection() # üëà Mudamos essa linha
    cursor = conn.cursor()
    # *** FIM DA ALTERA√á√ÉO ***
    
    # Cria tabela de produtos
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS produtos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            preco REAL NOT NULL,
            descricao TEXT
        )
    ''')
    
    # Insere alguns dados de exemplo
    cursor.execute("SELECT COUNT(*) FROM produtos")
    if cursor.fetchone()[0] == 0:
        produtos = [
            ('Cupcake de Chocolate', 8.50, 'Delicioso cupcake de chocolate com cobertura cremosa'),
            ('Cupcake de Baunilha', 7.00, 'Cupcake de baunilha com frosting de buttercream'),
            ('Cupcake de Morango', 9.00, 'Recheado com gel√©ia de morango natural')
        ]
        cursor.executemany('INSERT INTO produtos (nome, preco, descricao) VALUES (?, ?, ?)', produtos)
    
    conn.commit()
    conn.close()
    print(f"‚úÖ Banco de dados criado em: {db_path}")

if __name__ == '__main__':
    init_db()